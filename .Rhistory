knitr::opts_chunk$set(echo = TRUE)
library(readxl)
read_excel("/Users/zousiyu/Library/CloudStorage/OneDrive-JohnsHopkins/Term 4/Epi/Lecture2/Module1/Assignment1/NHIS 2022 Adult Data.csv")
library(readr)
read.csv("/Users/zousiyu/Library/CloudStorage/OneDrive-JohnsHopkins/Term 4/Epi/Lecture2/Module1/Assignment1/NHIS 2022 Adult Data.csv")
data <- read.csv("/Users/zousiyu/Library/CloudStorage/OneDrive-JohnsHopkins/Term 4/Epi/Lecture2/Module1/Assignment1/NHIS 2022 Adult Data.csv")
survey_data <- svydesign(id=~ppsu, strata=~pstrat, weights=~wtfa_a, data=data , nest=TRUE)
install.packages("survey")
library(survey)
library(sandwich)
survey_data <- svydesign(id=~ppsu, strata=~pstrat, weights=~wtfa_a, data=data , nest=TRUE)
View(survey_data)
svymean(~factor(hypertension),design=survey_data,na.rm=TRUE,deff=TRUE)
svyby(~factor(hypertension),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE)
svyby(~factor(hypertension),~partner,FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE)
svyby(~factor(hypertension),~factor(partner),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE)
table(data$hypertension)
tab(data$hypertension)
summary(data$hypertension)
table2(data$hypertension)
table(data$hypertension)
10152/(17452+10152)
17452/(17452+10152)
?svyby
svyby(~factor(hypertension),~factor(partner),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE, covmat=TRUE)
svyby(~factor(hypertension),~factor(partner),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE)
svyby(~factor(hypertension),~factor(partner),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE,na.rm=TRUE)
svyby(~factor(partner),~factor(hypertension),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE,na.rm=TRUE)
# Step 1: Subset the data for males reporting ever having had hypertension
male_hypertension_data <- subset(survey_data, sex == 1 & hypertension == 1)
# Step 2: Calculate the weighted mean age and its standard error for this subgroup
mean_age <- svymean(~age, design=male_hypertension_data, na.rm=TRUE,deff=TRUE)
# Step 2: Calculate the weighted mean age and its standard error for this subgroup
mean_age <- svymean(~agep_a, design=male_hypertension_data, na.rm=TRUE,deff=TRUE)
# Step 2: Calculate the weighted mean age and its standard error for this subgroup
svymean(~agep_a, design=male_hypertension_data, na.rm=TRUE,deff=TRUE)
svyby(~factor(maxed),~factor(hypertension),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE,na.rm=TRUE)
svyhist(~maxed,design=survey_data,freq=FALSE)
obj<-svyby(~factor(maxed),by=~factor(hypertension),design=survey_data)
obj<-svyby(~factor(maxed),by=~factor(hypertension),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE,na.rm=TRUE)
barplot(obj,legend.text=TRUE)
library(ggplot2)
ggplot(obj) +
geom_bar()
barplot(obj,legend.text=TRUE)
# Plot
bp <- barplot(as.matrix(obj), beside = TRUE, legend.text = TRUE, col = c("blue", "red"),
args.legend = list(title = "Legend", x = "topright"))
barplot(obj,legend.text=TRUE)
# Create a matrix of the values for plotting
values_to_plot <- as.matrix(obj)
# Define the labels for the 'maxed' variable
x_labels <- c("High School or Less", "At Least Some College")
# Define the legend for the 'hypertension' variable
legend_labels <- c("No Hypertension", "Hypertension")
# Define the colors for the plot
bar_colors <- c("grey", "darkgrey")
# Plot the barplot with these parameters
barplot(values_to_plot,
beside = TRUE,
col = bar_colors,
names.arg = x_labels,
legend.text = legend_labels,
args.legend = list(x = "topright", cex = 0.8, bty = "n"),
ylim = c(0, 1), # Adjust the y-limit to fit your data
xlab = "Education Level",
ylab = "Proportion with Hypertension",
main = "Education vs Hypertension")
# Plot the barplot with these parameters
barplot(values_to_plot,
beside = TRUE,
col = bar_colors,
names.arg = x_labels,
legend.text = legend_labels,
# args.legend = list(x = "topright", cex = 0.8, bty = "n"),
ylim = c(0, 1), # Adjust the y-limit to fit your data
xlab = "Education Level",
ylab = "Proportion with Hypertension",
main = "Education vs Hypertension")
# Clear the workspace
rm(list=ls())
# Load the survey package
library(survey)
# Assuming 'survey_data' is already defined and 'obj' calculation is correct
# Recreate 'obj' with svyby, assuming your previous setup was correct
obj <- svyby(~factor(maxed), by=~factor(hypertension), FUN=svymean, design=survey_data, ci=TRUE, deff=TRUE, na.rm=TRUE)
data <- read.csv("/Users/zousiyu/Library/CloudStorage/OneDrive-JohnsHopkins/Term 4/Epi/Lecture2/Module1/Assignment1/NHIS 2022 Adult Data.csv")
survey_data <- svydesign(id=~ppsu, strata=~pstrat, weights=~wtfa_a, data=data , nest=TRUE)
obj<-svyby(~factor(maxed),by=~factor(hypertension),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE,na.rm=TRUE)
# Run the barplot command
barplot(as.matrix(obj), legend.text=TRUE)
# Run the barplot command
barplot( obj, legend.text=TRUE)
# Run the barplot command
barplot(as.matrix(obj), legend.text=TRUE)
# Plot the barplot with these parameters
barplot(values_to_plot,
beside = TRUE,
col = bar_colors,
names.arg = x_labels,
legend.text = legend_labels,
# args.legend = list(x = "topright", cex = 0.8, bty = "n"),
ylim = c(0, 1), # Adjust the y-limit to fit your data
xlab = "Education Level",
ylab = "Proportion with Hypertension",
main = "Education vs Hypertension")
# Create a matrix of the values for plotting
values_to_plot <- as.matrix(obj)
# Define the labels for the 'maxed' variable
x_labels <- c("High School or Less", "At Least Some College")
# Define the legend for the 'hypertension' variable
legend_labels <- c("No Hypertension", "Hypertension")
# Define the colors for the plot
bar_colors <- c("grey", "darkgrey")
# Plot the barplot with these parameters
barplot(values_to_plot,
beside = TRUE,
col = bar_colors,
names.arg = x_labels,
legend.text = legend_labels,
# args.legend = list(x = "topright", cex = 0.8, bty = "n"),
ylim = c(0, 1), # Adjust the y-limit to fit your data
xlab = "Education Level",
ylab = "Proportion with Hypertension",
main = "Education vs Hypertension")
obj<-svyby(~factor(maxed),
by=~factor(hypertension),
FUN=svymean,design=survey_data,
ci=TRUE, deff=TRUE,na.rm=TRUE)
barplot(obj,legend.text=TRUE)
?barplot
barplot(obj,
legend.text=TRUE,
axisnames = TRUE,
names.arg = c('test1', 'test2'))
barplot(obj,
legend.text=TRUE,
axisnames = TRUE,
names.arg = c('No Hypertension', 'Hypertension'))
svyglm(hypertension~partner+maxed + sex + region,design=survey_data, family=quasibinomial(link="logit"
svyglm(hypertension~partner+maxed + sex + region,design=survey_data, family=quasibinomial(link="logit")
svyglm(hypertension~partner+maxed + sex + region,design=survey_data, family=quasibinomial(link="logit")
svyglm(hypertension~partner+maxed + sex + region,design=survey_data, family=quasibinomial(link="logit"))
svyglm( hypertension~ partner + maxed + sex + region, design=survey_data, family=quasibinomial(link="logit"))
fit <- svyglm( hypertension~ partner + maxed + sex + region, design=survey_data, family=quasibinomial(link="logit"))
summary(fit)
?svyglm
exp(confint(fit))
exp(fit)
exp(coef(fit))
knitr::opts_chunk$set(echo = TRUE)
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure',
'Hypertension'),
legend.text = c('High School education or less',
'Any college or more'),
ylim = c(0,1))
library(readr)
# install.packages("survey")
library(survey)
library(sandwich)
library(ggplot2)
obj<-svyby(~factor(maxed),
by=~factor(hypertension),
FUN=svymean,design=survey_data,
ci=TRUE, deff=TRUE,na.rm=TRUE)
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure',
'Hypertension'),
legend.text = c('High School education or less',
'Any college or more'),
ylim = c(0,1))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure',
'Hypertension'),
legend.text = c('High School education or less',
'At Least Some College'),
ylim = c(0,1))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1))
# Adding the legend separately with positioning
legend("topright", # Position of the legend
legend = c('High School education or less', 'At Least Some College'),
fill = c('color1', 'color2'))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1))
# Adding the legend separately with positioning
legend("topleft", # Position of the legend
legend = c('High School education or less', 'At Least Some College'))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1))
# Adding the legend separately with positioning
legend("top", # Position of the legend
legend = c('High School education or less', 'At Least Some College'))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure',
'Hypertension'),
legend.text = c('High School education or less',
'At Least Some College'),
ylim = c(0,1))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.5))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.0))
# Adding the legend separately with positioning
legend(x = 1, y = 1, # Position of the legend
legend = c('High School education or less', 'At Least Some College'))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.0))
# Adding the legend separately with positioning
legend(x = 2, y = 1.1, # Position of the legend
legend = c('High School education or less', 'At Least Some College'))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.0))
# Adding the legend separately with positioning
legend(x = 4, y = 1, # Position of the legend
legend = c('High School education or less', 'At Least Some College'))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.0))
# Adding the legend separately with positioning
legend(x = 3.5, y = 1, # Position of the legend
legend = c('High School education or less', 'At Least Some College'))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.0))
# Adding the legend separately with positioning
legend(x = 3.5, y = 1, # Position of the legend
legend = c('High School education or less', 'At Least Some College'),
fill = c('green', 'red'))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure',
'Hypertension'),
legend.text = c('High School education or less',
'At Least Some College'),
ylim = c(0,1))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure',
'Hypertension'),
legend.text = c('High School education or less',
'At Least Some College'),
legend.position = c(x = 3.5, y = 1),
ylim = c(0,1))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.0),
col = c("green", "red"))
# Adding the legend separately with positioning
legend(x = 3.5, y = 1, # Position of the legend
legend = c('High School education or less', 'At Least Some College'),
fill = c("green", "red"))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.0),
col = c("green", "red"))
# Adding the legend separately with positioning
legend(x = 3.3, y = 1, # Position of the legend
legend = c('High School education or less', 'At Least Some College'),
fill = c("green", "red"))
barplot(obj,
axisnames = TRUE,
names.arg = c('Normal Blood Pressure', 'Hypertension'),
ylim = c(0,1.0),
col = c("lightgreen", "pink"))
# Adding the legend separately with positioning
legend(x = 3.3, y = 1, # Position of the legend
legend = c('High School education or less', 'At Least Some College'),
fill = c("lightgreen", "pink"))
svyby(~factor(maxed),~factor(hypertension),FUN=svymean,design=survey_data, ci=TRUE, deff=TRUE,na.rm=TRUE)
fit2 <- glm( hypertension~ partner + maxed + sex + region, data = data, family=(link="logit"))
fit2 <- glm( hypertension~ partner + maxed + sex + region, data = data, family="logit")
?glm
fit2 <- glm( hypertension~ partner + maxed + sex + region, data = data, family=binomial(link = "logit"))
summary(fit2)
fit <- svyglm( hypertension~ partner + maxed + sex + region, design=survey_data, family=quasibinomial(link="logit"))
exp(coef(fit))
fit <- svyglm( factor(hypertension)~ factor(partner) + factor(maxed) + factor(sex) + factor(region), design=survey_data, family=quasibinomial(link="logit"))
exp(coef(fit))
summary(fit)
fit2 <- glm(  factor(hypertension) ~ factor(partner) + factor(maxed) +
factor(sex) + factor(region), data = data, family=binomial(link = "logit"))
summary(fit2)
exp(coef(fit2))
exp(coef(fit2))
summary(fit2)
